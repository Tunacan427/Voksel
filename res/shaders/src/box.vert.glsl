#version 450

layout(location = 0) out vec2 out_uv;

layout(set = 0, binding = 0) uniform UniformBuffer {
    // for vertex shader
    mat4 view;
    mat4 projection;

    // for fragment shader
    float thickness;
} ub;

layout(push_constant) uniform PushConstants {
    mat4 model;
} pc;

struct Vertex {
    vec3 pos;
    vec2 uv;
};

const Vertex vertices[] = {
    { { -0.5, -0.5, -0.5 }, { 0.0, 0.0 } },
    { {  0.5, -0.5, -0.5 }, { 1.0, 0.0 } },
    { {  0.5,  0.5, -0.5 }, { 1.0, 1.0 } },
    { {  0.5,  0.5, -0.5 }, { 1.0, 1.0 } },
    { { -0.5,  0.5, -0.5 }, { 0.0, 1.0 } },
    { { -0.5, -0.5, -0.5 }, { 0.0, 0.0 } },

    { { -0.5, -0.5,  0.5 }, { 0.0, 0.0 } },
    { {  0.5, -0.5,  0.5 }, { 1.0, 0.0 } },
    { {  0.5,  0.5,  0.5 }, { 1.0, 1.0 } },
    { {  0.5,  0.5,  0.5 }, { 1.0, 1.0 } },
    { { -0.5,  0.5,  0.5 }, { 0.0, 1.0 } },
    { { -0.5, -0.5,  0.5 }, { 0.0, 0.0 } },

    { { -0.5,  0.5,  0.5 }, { 1.0, 0.0 } },
    { { -0.5,  0.5, -0.5 }, { 1.0, 1.0 } },
    { { -0.5, -0.5, -0.5 }, { 0.0, 1.0 } },
    { { -0.5, -0.5, -0.5 }, { 0.0, 1.0 } },
    { { -0.5, -0.5,  0.5 }, { 0.0, 0.0 } },
    { { -0.5,  0.5,  0.5 }, { 1.0, 0.0 } },

    { {  0.5,  0.5,  0.5 }, { 1.0, 0.0 } },
    { {  0.5,  0.5, -0.5 }, { 1.0, 1.0 } },
    { {  0.5, -0.5, -0.5 }, { 0.0, 1.0 } },
    { {  0.5, -0.5, -0.5 }, { 0.0, 1.0 } },
    { {  0.5, -0.5,  0.5 }, { 0.0, 0.0 } },
    { {  0.5,  0.5,  0.5 }, { 1.0, 0.0 } },

    { { -0.5, -0.5, -0.5 }, { 0.0, 1.0 } },
    { {  0.5, -0.5, -0.5 }, { 1.0, 1.0 } },
    { {  0.5, -0.5,  0.5 }, { 1.0, 0.0 } },
    { {  0.5, -0.5,  0.5 }, { 1.0, 0.0 } },
    { { -0.5, -0.5,  0.5 }, { 0.0, 0.0 } },
    { { -0.5, -0.5, -0.5 }, { 0.0, 1.0 } },

    { { -0.5,  0.5, -0.5 }, { 0.0, 1.0 } },
    { {  0.5,  0.5, -0.5 }, { 1.0, 1.0 } },
    { {  0.5,  0.5,  0.5 }, { 1.0, 0.0 } },
    { {  0.5,  0.5,  0.5 }, { 1.0, 0.0 } },
    { { -0.5,  0.5,  0.5 }, { 0.0, 0.0 } },
    { { -0.5,  0.5, -0.5 }, { 0.0, 1.0 } }
};

void main() {
    Vertex vertex = vertices[gl_VertexIndex];
    out_uv = vertex.uv;
    gl_Position = ub.projection * ub.view * pc.model * vec4(vertex.pos, 1.0);
}
